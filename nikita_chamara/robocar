#define ld A1 //подключение портов
#define pd A2
#define M1_DIR 4
#define M1_PWM 5
#define M2_DIR 7
#define M2_PWM 6

int STATE = 0; //0 - halt
               //1 - follow line
               //2 - search line
int SpeedSP = 0; //вводим переменную для движения по спирали
   
//_______________________________________________________________________________  
 
void state_halt() //состояние ожидания кнопки
{
if (digitalRead(12) == 0) STATE = 1; //считываем показания с кнопки
}

//_______________________________________________________________________________

void state_follow_line() //состояние движения по линии
{
  int k = 0; //вводим переменную состояния (значение 0 - тележка ждет нажатия кнопки, значение 1 - тележка начинает движение по линии)
  int avgspeed = 190; //вводим переменную, отвечающую за среднее значение скорости движения тележки (скорость движения, если оба датчика стоят на белом)
  int kP = 4.15; //вводим переменную, коэффициента P-регулятора

  int LDc = analogRead(ld); //считываем показания левого датчика в переменную
  int PDc = analogRead(pd); //считываем показания правого датчика в переменную
  int LD = map (LDc, 530, 899, 100, 0); //преобразуем значения с левого датчика в диапазон от 0 до 100 (0-черный, 100-белый), (LDc, черное, белое, 100, 0)
  int PD = map (PDc, 356, 853, 100, 0); //преобразуем значения с правого датчика в диапазон от 0 до 100 (0-черный, 100-белый),(PDr, черное, белое, 100, 0)
  Serial.println(String(k) + ' ' + String(LDc) + ' ' + String(PDc)); //экран показания кнопки, переменной состояния, показания левого датчика и правого датчика (для калибровки датчиков)
  
  int correct_L = LD * kP; //переменная корректировки по LD
  int correct_R = PD * kP; //переменная корректировки по PD
  Motors(avgspeed - correct_L + correct_R, avgspeed - correct_R + correct_L); //запуск моторов с учетом корректировок
if (correct_L < 50 and correct_R < 50) STATE = 2;
}

void InitMotors() //подключение портов для управления моторами
{
  pinMode(M1_DIR, OUTPUT); 
  pinMode(M1_PWM, OUTPUT);
  pinMode(M2_DIR, OUTPUT);
  pinMode(M2_PWM, OUTPUT);
}

void Motors(int Speed1, int Speed2)//подпрограмма управления двигателями
{
  if (Speed1 > 255) Speed1 = 255; //ограничения по скоростям
  if (Speed1 < -255) Speed1 = -255;
  if (Speed2 > 255) Speed2 = 255;
  if (Speed2 < -255) Speed2 = -255;
  if (Speed1 > 0) //управление для первого мотора
  {
    digitalWrite(M1_DIR, 1);
    analogWrite(M1_PWM, Speed1);
  }
  else
  {
    digitalWrite(M1_DIR, 0);
    analogWrite(M1_PWM, -Speed1);
  }

if (Speed2 > 0) //управление для второго мотора
  {
    digitalWrite(M2_DIR, 1);
    analogWrite(M2_PWM, Speed2);
  }
  else
  {
    digitalWrite(M2_DIR, 0);
    analogWrite(M2_PWM, -Speed2);
  }
}

//_______________________________________________________________________________

void state_follow_line() //состояние поиска линии
{
int POSLEDNEE_ST = 0; //0 - выезд на линию справа
                   //1 - выезд на линию слева
if (POSLEDNEE_ST == 0) 
{
  if (correct_L > 50) 
    {
      motors(SpeedSP - 50, SpeedSP + 150);
      delay(150);
      SpeedSP = SpeedSP + 1;
    }
    else {
      STATE = 1;
      SpeedSP = 0;
    }
}
if (POSLEDNEE_ST == 1) 
{
if (correct_R > 50) 
    {
      motors(SpeedSP + 150, SpeedSP - 50);
      delay(150);
      SpeedSP = SpeedSP + 1;
    }
    else {
      STATE = 1;
      SpeedSP = 0;
    }
  }
}  
if (LD < 50 and PD > 90) STATE = 1;
if (LD > 90 and PD < 50) STATE = 1;
}

void setup()
{
  Serial.begin(9600); //скорость работы порта
  pinMode(12, INPUT_PULLUP);//объявим порт кнопки для устранения дребезга
  InitMotors(); //запускаем подпрограмму, объявляющую порты двигателя
}

void loop() 
{
 if (STATE == 0) state_halt();
 if (STATE == 1) state_follow_line();
 if (STATE == 2) state_search_line();
}
