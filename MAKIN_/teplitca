#include <DHT.h>         
#include <APDS9930.h>

#define TIME_NIGHT = 86400          // ночь = [16*60*60, 24*60*60]
#define TIME_DAY = 57600            // день = [0, 16*60*60]
#define F_TIME_COOLER = 7200        // время автономного включения куллера 
#define S_TIME_COOLER = 21600       // время автономного включения куллера 
#define INTERVAL_TIME_COOLER = 3600 // интервал в котором включается куллер

#define DHTPIN             2        // контакт подклчения датчика температуры
#define RELAY              4        // контакт реле
#define WATER_PUMP         5        // помпа
#define LIGHT_DIODE        6        // лента
#define FAN                7        // вентилятор
#define HEATER             8        // обогреватель

#define DHTTYPE DHT21               // DHT 21  (AM2301)

int TIME_SECONDS = 0;               // день = [0,16*60*60] ночь = [16*60*60, 24*60*60] секунд
int STATE_DAY = 0;

// объявляем объект с параметрами
DHT DHT_F(DHTPIN, DHTTYPE);
DHT DHT_S(DHTPIN, DHTTYPE);
APDS9930 apds;

struct Status {                // статус  проверяемых параметров, здесь мы вводим переменные влажность воздуха и почвы, свет, тепло 
  bool status_vent;
  bool status_air_humudity;
  bool status_dirt_humudity;
  bool status_heat;
  bool status_light;
} STATUS = {false, false, false, false, false};

struct Climate {             // статус  проверяемых параметров(минимальные и макс. значения для них), здесь мы вводим переменные влажность воздуха и почвы, свет, тепло 
  int min_dirt_humidity;
  int max_dirt_humidity;
  int min_air_humidity;
  int max_air_humidity;
  int min_air_temp;
  int max_air_temp;
  int min_light;
  int max_light;
} CLIMATE = {30, 50, 40, 50, 15, 24, 5000, 12000}; // задаём исходные параметры влажности почвы, воздуха и прочего

enum class TimeOfDay { //выбор переменной день или ночь
  DAY,
  NIGHT
};

// полив
void irrigate() {         // если переменнная status_dirt_humudity из структуры STATUS  и status_air_humudity = true, то 
  if (STATUS.status_dirt_humudity && STATUS.status_air_humudity) {
    digitalWrite(WATER_PUMP, HIGH);  //  подаём питание на насос
  } else {
    digitalWrite(WATER_PUMP, LOW);    //  если status_dirt_humudity из структуры STATUS  и status_air_humudity = false , то снимаем питание с насоса
  }
}

// обогреватель
void heater() {              //функция подогрева
  if (STATUS.status_heat) {       // если переменнная sstatus_heat из структуры STATUS  =true, то 
    digitalWrite(HEATER, HIGH); //  подаём питание на нагреватель
  } else {
    digitalWrite(HEATER, LOW);    //  если status_dirt_humudity из структуры STATUS  и status_air_humudity =  false , то снимаем питание с нагревателя
  }
}

// обдув
void fan() {                     
  if( STATUS.status_vent                     // если переменнная status_vent из структуры STATUS и status_air_humidity и status_heat =  true, то 
        && STATUS.status_air_humidity
        && STATUS.status_heat ) {
        digitalWrite(FAN, HIGH);     //  подаём питание на вентилятор
    } else {
        digitalWrite(FAN, LOW);   // если переменнная status_vent из структуры STATUS и status_air_humidity и status_heat =   false, то снимаем питание с вентилятора
    }
}

// освещение
void light() {                      
  if (STATUS.status_light) {        // если переменнная status_light из структуры STATUS =  true, то 
    digitalWrite(LIGHT_DIODE, HIGH);   // то включаем освещение
  } else {                            
    digitalWrite(LIGHT_DIODE, LOW); // если переменнная status_light из структуры STATUS =  false, то выключаем освещение
  }
}

// реализация таймера (для определения дня и ночи)
void timer() {
  TIME_SECONDS++;    // прибавляем единицу к переменной TIME_SECONDS
  STATE_DAY = TIME_SECONDS > TIME_DAY ? 1 : 0;
  if(TIME_SECONDS > TIME_DAY){      // если TIME_SECONDS больше TIME_DAY ( которая равна 57600), то
    STATE_DAY = 1;                   //то  STATE_DAY = 1 (наступает ночь) 
  }
  else {                               // если TIME_SECONDS меньше TIME_DAY ( которая равна 57600), то
    STATE_DAY = 0;                       //то  STATE_DAY = 1
  }

  if (TIME_SECONDS >= TIME_NIGHT) TIME_SECONDS = 0;      // если TIME_SECONDS больше TIME_NIGHT ( которая равна 86400), то  TIME_SECONDS обнуляется 
  delay(1000);
}

// влючение вентиляции два раза в день на 1 час
void periodic_ventilation() {                            
  if (F_TIME_COOLER < TIME_SECONDS 
        && TIME_SECONDS < (F_TIME_COOLER + INTERVAL_TIME_COOLER)) { STATUS.status_vent = true; return;}    // если F_TIME_COOLER меньше TIME_SECOND и  TIME_SECONDS < (F_TIME_COOLER(время работы вентилятора) + (интервал работы вентилятора)INTERVAL_TIME_COOLER), тогда включается вентилятор
  if (S_TIME_COOLER < TIME_SECONDS 
        && TIME_SECONDS < (S_TIME_COOLER + INTERVAL_TIME_COOLER)) { STATUS.status_vent = true; return;} // если S_TIME_COOLER меньше TIME_SECOND и  TIME_SECONDS < (S_TIME_COOLER(время работы вентилятора) + (интервал работы вентилятора)INTERVAL_TIME_COOLER), тогда включается вентилятор (для второго периода работы вентилятора)
  STATUS.status_vent = false;    // если условия не выполняются, тогда вентилятор не включается
}

void control_temperature() {
  // считываем температуру в цельсиях
  float t = DHT_F.readTemperature();  
  if (t < CLIMATE.min_air_temp) {     // если t(температура) < CLIMATE.min_air_temp(минимальное занчение температуры, заданное в структуре)
    STATUS.status_heat = true;  // то     STATUS.status_heat = true;  и   STATUS.status_vent = false;  (переменные для работы обдува, полива, нагревателя)
    STATUS.status_vent = false; 
    return;
  } 
  if (t > CLIMATE.max_air_temp) {   // если t(температура) > CLIMATE.mах_air_temp(максимальное занчение температуры, заданное в структуре)
    STATUS.status_vent = true;     // то  STATUS.status_vent = true;  и   STATUS.status_heat = false;  (переменные для работы обдува, полива, нагревателя)
    STATUS.status_heat = false;   
    return;
  }
}



void control_air_humidity() {
  // считываем влажность
  float h = DHT_F.readHumidity();      // считали влажность в переменную h
  if (h < CLIMATE.min_air_humidity) {       // если h(влажность)< CLIMATE.min_air_humidity(минимальное занчение влажности, заданное в структуре)
    STATUS.status_air_humudity = true;        // то  STATUS.status_air_humudity = true;  и  STATUS.status_vent = false; (переменные для работы обдува, полива, нагревателя)
    STATUS.status_vent = false;              
    return;
  }
  if (h > CLIMATE.max_air_humidity) {      // если h(влажность)> CLIMATE.max_air_humidity(максимальное занчение влажности, заданное в структуре)
    STATUS.status_air_humudity = false;    // то   STATUS.status_air_humudity = false;  и   STATUS.status_vent = true;(переменные для работы обдува, полива, нагревателя)
    STATUS.status_vent = true;
    return;
  }
}

void control_light() {
  // считываем освещение
  float l = apds.readAmbientLightLux();   // считали освещение в переменную l

  if (STATE_DAY == TimeOfDay::DAY && l < CLIMATE.min_light) { // если l(значение освещения)< CLIMATE.min_light(минимальное занчение освещённости, заданное в структуре) и STATE_DAY == TimeOfDay::DAY(то есть ДЕНЬ)
    STATUS.status_light = true;  // то    STATUS.status_light = true ПЕРЕМЕННАЯ ДЛЯ ВКЛЮЧЕНИЯ ОСВЕЩЕНИЯ 
  } else {
    STATUS.status_light = false;
  }
}

void setup() {
  Serial.begin(9600);
  dht.begin();                     // запускаем датчик
  apds.init();                     // Инициируем работу датчика
  apds.enableLightSensor(false);   // Разрешаем режим определения освещённости:
}

void loop() { // здесь запускаем функции в работу
  timer();

  periodic_ventilation();
  control_temperature();
  control_dirt_humidity();
  control_air_humidity();
  control_light();

  irrigate();
  fan();
  heater();
  light();
}
