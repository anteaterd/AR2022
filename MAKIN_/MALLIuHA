#define M1_DIR 4
#define M1_PWM 5
#define M2_DIR 7
#define M2_PWM 6
int DATA;
int U;
int TIME = 0;
int I = 0;
int P = 0;
int ER0 = 0;
int Kp=2;
int Ki=0.8;
int MachineState=0;
int MachineTurn=0;
int left=0;
int right=0;

enum State {
  SEARCHLINE,
  MOVE
};

enum Turn {
  LEFT,
  RIGHT
};

int ButtonRead(int ButtonPin)
{
  int Data = digitalRead(ButtonPin);
  if(ButtonPin == 12) Data = !Data;
  return Data;
}

void InitMotors()
{
  pinMode(M1_DIR, OUTPUT);
  pinMode(M1_PWM, OUTPUT);
  pinMode(M2_DIR, OUTPUT);
  pinMode(M2_PWM, OUTPUT);
}

void Motors(int Speed1, int Speed2)
{
  if(Speed1 > 255) Speed1 = 255;
  if(Speed1 < -255) Speed1 = -255;
  if(Speed2 > 255) Speed2 = 255;
  if(Speed2 < -255) Speed2 = -255;

  if(Speed1 > 0)
  {
    digitalWrite(M1_DIR, 1);
    analogWrite(M1_PWM, Speed1);
  }
  else
  {
    digitalWrite(M1_DIR, 0);
    analogWrite(M1_PWM, -Speed1);
  }

  if(Speed2 > 0)
  {
    digitalWrite(M2_DIR, 1);
    analogWrite(M2_PWM, Speed2);
  }
  else
  {
    digitalWrite(M2_DIR, 0);
    analogWrite(M2_PWM, -Speed2);
  }
}



int LineSensorRead(const int SensorPin)
{
  if(SensorPin < A0 || SensorPin > A3)
    return -1;

  int Data = analogRead(SensorPin);
  return Data;
}


void setup()
{
  
  pinMode(12, INPUT_PULLUP);
  InitMotors();
  Serial.begin(9600);
  
}

void search_LINE(){
  if  (DATA < 620)
  {
    //Motors (40, 250);
   if(MachineTurn == Turn::LEFT) Motors(250,40);
   if(MachineTurn == Turn::RIGHT) Motors(40,250);  
  }
  if (DATA > 620) {
    MachineState = 1;
  }
   
}
void control()
{
 
if (MachineState == State::MOVE) Move();
if (MachineState == State::SEARCHLINE) search_LINE();
}

void Move()
{
ER0=650-DATA;
P=ER0*Kp;
I=I+ER0*Ki;
U=P+I;
left = 150+U;
right = 150-U;
Motors(150-U, 150+U);
if (DATA < 620){
  MachineState = 0;
}
if (left > right)
    {
      MachineTurn=1;
    } 
    else
    {
      MachineTurn=0;
    }
}

void loop() {

DATA=LineSensorRead(A2);
control();

}
